import streamlit as st
import pandas as pd
import gspread
from datetime import datetime, date, timedelta
from zoneinfo import ZoneInfo
import pathlib
import base64
from google.oauth2.service_account import Credentials

@st.cache_data(ttl=3600)
def load_credentials():
    creds_info = {
    "type": st.secrets["google_service_account"]["type"],
    "project_id": st.secrets["google_service_account"]["project_id"],
    "private_key_id": st.secrets["google_service_account"]["private_key_id"],
    "private_key": st.secrets["google_service_account"]["private_key"],
    "client_email": st.secrets["google_service_account"]["client_email"],
    "client_id": st.secrets["google_service_account"]["client_id"],
    "auth_uri": st.secrets["google_service_account"]["auth_uri"],
    "token_uri": st.secrets["google_service_account"]["token_uri"],
    "auth_provider_x509_cert_url": st.secrets["google_service_account"]["auth_provider_x509_cert_url"],
    "client_x509_cert_url": st.secrets["google_service_account"]["client_x509_cert_url"],
    "universe_domain": st.secrets["google_service_account"]["universe_domain"],
    }
    # D√πng ƒë·ªÉ k·∫øt n·ªëi Google APIs
    credentials = Credentials.from_service_account_info(
        creds_info,
        scopes=["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
    )
    return credentials

@st.cache_data(ttl=3600)
def get_img_as_base64(file):
    with open(file, "rb") as f:
        data = f.read()
    return base64.b64encode(data).decode()

def load_css(file_path):
    with open(file_path) as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

@st.cache_data(ttl=10)
def load_data(x):
    credentials = load_credentials()
    gc = gspread.authorize(credentials)
    sheet = gc.open(x).sheet1
    data = sheet.get_all_values()
    header = data[0]
    values = data[1:]
    data_final = pd.DataFrame(values, columns=header)
    if st.session_state.phan_quyen == "2" and x == st.secrets["sheet_name"]["input_1"]:
        data_final = data_final.drop(["Ph√¢n quy·ªÅn","M·∫≠t kh·∫©u"], axis=1)
    if x == st.secrets["sheet_name"]["input_2"]:
        data_final = data_final.drop(["K·∫øt qu·∫£ ƒë√°nh gi√°","T·ªìn ƒë·ªçng"], axis=1)
    return data_final

@st.cache_data(ttl=10)
def get_key_from_value(dictionary, value):
    return next((key for key, val in dictionary.items() if val == value), None)

@st.cache_data(ttl=10)
def load_data_GSheet(name):
    credentials = load_credentials()
    gc = gspread.authorize(credentials)
    sheet = gc.open(name).sheet1
    data = sheet.get_all_records()
    df = pd.DataFrame(data)
    df['Timestamp'] = pd.to_datetime(df['Timestamp'], errors='coerce')
    start_date = st.session_state.sd
    end_date = st.session_state.ed + timedelta(days=1)
    df = df[(df['Timestamp'] >= pd.Timestamp(start_date)) & (df['Timestamp'] < pd.Timestamp(end_date))]
    if name != st.secrets["sheet_name"]["output_4"]:
        df["Data"] = df["Data"].str.replace("#", "\n")
        df["Data"] = df["Data"].str.replace("|", "  ")
    if name == st.secrets["sheet_name"]["output_1"]:
        df = df.drop(["M√£ quy tr√¨nh","T·ªâ l·ªá tu√¢n th·ªß","T·ªâ l·ªá an to√†n"], axis=1)
    return df

def change_GS(stt,tt1,kq1):
    credentials = load_credentials()
    gc = gspread.authorize(credentials)
    sheeto4 = st.secrets["sheet_name"]["output_4"]
    sheet = gc.open(sheeto4).sheet1
    sheet.update_cell(stt+1, 8, tt1)
    sheet.update_cell(stt+1, 9, kq1)
    st.toast("ƒê√£ c·∫≠p nh·∫≠t thay ƒë·ªïi")

def xoa_dong(stt_xx,sheetb):
    credentials = load_credentials()
    gc = gspread.authorize(credentials)
    sheet = gc.open(sheetb).sheet1
    sheet.delete_rows(stt_xx+1)
    stt_xx = [[i] for i in range(1, len(sheet.get_all_values()))]  # Danh s√°ch s·ªë th·ª© t·ª±

    # X√¢y v√πng c·∫ßn c·∫≠p nh·∫≠t (v√≠ d·ª• A2:A101 n·∫øu c·ªôt A l√† STT)
    start_row = 2  # B·ªè qua ti√™u ƒë·ªÅ
    end_row = len(sheet.get_all_values())
    col_letter = chr(64 + 1)  # 1 -> A, 2 -> B, ...
    cell_range = f"{col_letter}{start_row}:{col_letter}{end_row}"

    # D√πng batch update
    cell_range_obj = sheet.range(cell_range)
    for i, cell in enumerate(cell_range_obj):
        cell.value = i + 1  # STT b·∫Øt ƒë·∫ßu t·ª´ 1

    sheet.update_cells(cell_range_obj)  # G·ª≠i 1 l·∫ßn duy nh·∫•t
    st.toast("ƒê√£ x√≥a d√≤ng theo y√™u c·∫ßu")
#########################################################################################################
#C√†i th·ªùi gian s·∫µn
css_path = pathlib.Path("asset/style.css")
load_css(css_path)
img = get_img_as_base64("pages/img/logo.png")
st.markdown(f"""
    <div class="fixed-header">
        <div class="header-content">
            <img src="data:image/png;base64,{img}" alt="logo">
            <div class="header-text">
                <h1>B·ªÜNH VI·ªÜN ƒê·∫†I H·ªåC Y D∆Ø·ª¢C TH√ÄNH PH·ªê H·ªí CH√ç MINH<br><span style="color:#c15088">Ph√≤ng ƒêi·ªÅu d∆∞·ª°ng</span></h1>
            </div>
        </div>
        <div class="header-subtext">
        <p style="color:#b36002; padding-left:25px">TRANG QU·∫¢N TR·ªä</p>
        </div>
    </div>
    <div class="header-underline"></div>

 """, unsafe_allow_html=True)
html_code = f'<p class="admin_1"><i>Xin ch√†o admin:{st.session_state.username}</i></p>'
st.html(html_code)

#Gi√° tr·ªã n√†y gi√∫p cache nh·∫≠n ra s·ª± thay ƒë·ªïi ƒë·∫ßu v√†o
input_data = {
              "input_1":"Danh s√°ch nh√¢n s·ª±",
              "input_2":"Gi√°m s√°t quy tr√¨nh",
              "input_3":"H·ªì s∆° b·ªánh √°n",
              "input_4":"Gi√°o d·ª•c s·ª©c kh·ªèe",
              }
inp = st.selectbox(label="Input",
            options=["---"]+ list(input_data.values()),
            index=0,             
            )
if inp and inp != "---":
    with st.expander("M·ªü r·ªông üå¶Ô∏è"):
        try:
            a = get_key_from_value(input_data, inp)
            sheet = st.secrets["sheet_name"][a]
            data_in = load_data(sheet)
            st.dataframe(data_in, hide_index=True,height=225)
        except:
            st.write("Ch·ªçn b·∫£ng input")
output_data = {
              "output_1":"Data gi√°m s√°t quy tr√¨nh",
              "output_2":"Data h·ªì s∆° b·ªánh √°n",
              "output_3":"Data gi√°o d·ª•c s·ª©c kh·ªèe",
              "output_4":"C√°c y√™u c·∫ßu b·ªï sung/ph√¢n quy·ªÅn"
              }
outp = st.selectbox(label="Output",
            options=["---"]+ list(output_data.values()),
            index=0,             
            )

now_vn = datetime.now(ZoneInfo("Asia/Ho_Chi_Minh"))
md = date(2025, 1, 1) 
if outp and outp != "---":
        with st.expander("M·ªü r·ªông üå¶Ô∏è"):
            with st.form("Th·ªùi gian"):
                cold = st.columns([5,5])
                with cold[0]:
                    sd = st.date_input(
                    label="Ng√†y b·∫Øt ƒë·∫ßu",
                    value=md,
                    min_value=md,
                    max_value=now_vn.date(), 
                    format="DD/MM/YYYY",
                    key="sd",
                    )
                with cold[1]:
                    ed = st.date_input(
                    label="Ng√†y k·∫øt th√∫c",
                    value=now_vn.date(),
                    min_value=md,
                    max_value=now_vn.date(), 
                    format="DD/MM/YYYY",
                    key="ed",
                    )
                submit_thoigian = st.form_submit_button("C·∫≠p nh·∫≠t ng√†y")
            if submit_thoigian:
                if ed < sd:
                    st.error("Ng√†y k·∫øt th√∫c ƒë·∫øn tr∆∞·ªõc ng√†y b·∫Øt ƒë·∫ßu. Vui l√≤ng ch·ªçn l·∫°i")                    
            try:
                placeholder = st.empty()
                b = get_key_from_value(output_data, outp)
                sheetb = st.secrets["sheet_name"][b]
                data_out = load_data_GSheet(sheetb)
                if data_out.empty:
                    st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian y√™u c·∫ßu")
                else:
                    columns = data_out.columns.tolist()
                    rows = list(range(1,len(data_out)+1))
                    placeholder.dataframe(data_out, hide_index=True)
                    if outp == "C√°c y√™u c·∫ßu b·ªï sung/ph√¢n quy·ªÅn":
                        st.write("Th√¥ng tin mu·ªën ch·ªânh s·ª≠a")
                        with st.form("Thay ƒë·ªïi t√¨nh tr·∫°ng"):
                            col = st.columns([2,3,3])
                            with col[0]:
                                stt = st.number_input(label="STT y√™u c·∫ßu", 
                                                    min_value=1, 
                                                    max_value=len(data_out), 
                                                    step=1,
                                                    key="stt",
                                                    )
                            with col[1]:
                                tt = st.selectbox("ƒê·ªïi t√¨nh tr·∫°ng", 
                                                options=["Ch∆∞a xem","ƒê√£ xem"],
                                                key="tt",
                                                )
                            with col[2]:
                                kq = st.selectbox("ƒê·ªïi k·∫øt qu·∫£", 
                                                options=["Tr·ªëng","Ho√†n th√†nh","T·ª´ ch·ªëi"],
                                                key="kq",
                                                )
                            submit_tt = st.form_submit_button("L∆∞u")
                        if submit_tt:
                            if (tt == "Ch∆∞a xem" and kq == "T·ª´ ch·ªëi") or (tt == "Ch∆∞a xem" and kq == "Ho√†n th√†nh"):
                                st.write("Gi√° tr·ªã k·∫øt qu·∫£ kh√¥ng ph√π h·ª£p")
                            else:
                                print('qqqq')
                                if tt == "Ch∆∞a xem":
                                    tt1 = ""
                                    kq1 = ""
                                else:
                                    tt1 = "x"
                                if kq == "Tr·ªëng":
                                    kq1 = ""
                                elif kq == "Ho√†n th√†nh":
                                    kq1 = "1"
                                else:
                                    kq1 = "0"
                                change_GS(stt,tt1,kq1)
                                data_out = load_data_GSheet(sheetb)
                                placeholder.dataframe(data_out, hide_index=True)
                    else:
                        # col = st.columns([5,5])
                        # with col[0]:
                        with st.form("X√≥a v√† s·ª≠a b·∫£ng"):
                            stt_xx = st.number_input(label="STT d√≤ng c·∫ßn x√≥a", 
                                                min_value=1, 
                                                max_value=len(data_out), 
                                                step=1,
                                                key="stt_xx",
                                                )
                            submitxs = st.form_submit_button("X√≥a")
                        if submitxs:
                            xoa_dong(stt_xx,sheetb)
            except Exception as e:
                st.write("L·ªói x·∫£y ra:", e)
                
                       
        
        